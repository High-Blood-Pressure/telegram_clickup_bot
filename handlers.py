import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import helpers

# ======================
#  COMMANDS HANDLERS
# ======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    helpers.get_user_context(user_id)

    text = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TimeLoggerBot!\n\n"
        "üõ†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç /context.\n"
        "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/context - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n\n"
        "‚öôÔ∏è –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "/shutdown - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"
    )

    await update.message.reply_text(text)


async def change_workspace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ workspace
        workspaces = await helpers.get_clickup_teams()
        if not workspaces:
            await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ workspace. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω ClickUp.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º workspace –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_workspaces = helpers.format_workspaces(workspaces)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        for ws in formatted_workspaces:
            keyboard.append([InlineKeyboardButton(ws["name"], callback_data=f"ws_{ws['id']}")])

        await update.callback_query.edit_message_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ workspace:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        helpers.logger.error(f"–û—à–∏–±–∫–∞ –≤ change_workspace: {e}")
        await update.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ workspace. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def change_sprint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        context_data = helpers.get_user_context(user_id)

        workspace_id = context_data.get("current_workspace")
        if not workspace_id:
            await update.callback_query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ workspace —á–µ—Ä–µ–∑ /context"
            )
            return

        sprints = await helpers.get_clickup_sprints(workspace_id)
        if not sprints:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É 'Sprint' –∏–ª–∏ —Å–ø—Ä–∏–Ω—Ç—ã –≤ –Ω–µ–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ workspace –µ—Å—Ç—å –ø–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ 'Sprint'."
            )
            return

        formatted_sprints = helpers.format_sprints(sprints)
        keyboard = []
        for sprint in formatted_sprints:
            keyboard.append([InlineKeyboardButton(
                sprint["name"],
                callback_data=f"sprint_{sprint['id']}"
            )])

        folder_name = formatted_sprints[0]["folder_name"] if formatted_sprints else "Sprint"

        await update.callback_query.edit_message_text(
            f"‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∏–Ω—Ç –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}':",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        helpers.logger.error(f"–û—à–∏–±–∫–∞ –≤ change_sprint: {e}")
        await update.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ sprint. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def change_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        context_data = helpers.get_user_context(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ workspace –∏ —Å–ø—Ä–∏–Ω—Ç
        if not context_data.get("current_workspace"):
            await update.callback_query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ workspace —á–µ—Ä–µ–∑ /context"
            )
            return

        if not context_data.get("current_sprint"):
            await update.callback_query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∏–Ω—Ç —á–µ—Ä–µ–∑ /context"
            )
            return

        sprint_id = context_data["current_sprint"]
        members = await helpers.get_clickup_list_members(sprint_id)

        if not members:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞."
            )
            return

        formatted_members = helpers.format_members(members)
        keyboard = []
        for member in formatted_members:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏ email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_name = f"{member['username']}"
            if member['email']:
                display_name += f" ({member['email']})"

            keyboard.append([InlineKeyboardButton(
                display_name,
                callback_data=f"user_{member['id']}"
            )])

        await update.callback_query.edit_message_text(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        helpers.logger.error(f"–û—à–∏–±–∫–∞ –≤ change_user: {e}")
        await update.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ user. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def log_my_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context_data = helpers.get_user_context(user_id)

    required = ["current_workspace", "current_sprint", "current_user"]
    if not all(context_data.get(key) for key in required):
        await update.callback_query.edit_message_text(
            "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        )
        return

    sprint_id = context_data["current_sprint"]
    clickup_user_id = context_data["current_user"]
    tasks = await helpers.get_user_tasks(sprint_id, clickup_user_id)

    if not tasks:
        await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ. –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç—ã.")
        return

    # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    for task in tasks:
        helpers.cache_task({
            "id": task["id"],
            "name": task.get("name", ""),
            "url": task.get("url", ""),
            "status": task.get("status", {}).get("status", "unknown"),
            "workspace_id": context_data["current_workspace"],
            "sprint_id": sprint_id
        })

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_tasks = helpers.format_tasks(tasks)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    helpers.user_logging_state[user_id] = {
        "tasks": formatted_tasks,
        "workspace_id": context_data["current_workspace"],
        "clickup_user_id": clickup_user_id
    }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    keyboard = []
    for task in formatted_tasks:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
        task_name = task["name"]
        if len(task_name) > 50:
            task_name = task_name[:47] + "..."

        keyboard.append([InlineKeyboardButton(
            task_name,
            callback_data=f"task_{task['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="log_cancel")])

    await update.callback_query.edit_message_text(
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if helpers.get_shutting_down():
        await update.message.reply_text("üîÑ –ë–æ—Ç —É–∂–µ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        return

    user_id = update.effective_user.id

    if not helpers.is_admin(user_id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        helpers.logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç {user_id}")
        return

    helpers.logger.info(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
    helpers.set_shutting_down(True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(helpers.stop_application())
    await update.message.reply_text("üõë –í—ã–∫–ª—é—á–∞—é –±–æ—Ç–∞...")


async def current_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        context_data = helpers.get_user_context(user_id)
        text = "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</b>\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ workspace
        workspace_id = context_data.get("current_workspace")
        if workspace_id:
            workspaces = await helpers.get_clickup_teams()
            workspace = next((ws for ws in helpers.format_workspaces(workspaces)
                              if ws["id"] == workspace_id), None)
            if workspace:
                text += f"üè¢ <b>Workspace:</b> {workspace['name']} (ID: {workspace_id})\n"
            else:
                text += f"üè¢ <b>Workspace:</b> ID {workspace_id} (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n"
        else:
            text += "üè¢ <b>Workspace:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω\n"

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø—Ä–∏–Ω—Ç–µ
        sprint_id = context_data.get("current_sprint")
        if sprint_id:
            if workspace_id:
                sprints = await helpers.get_clickup_sprints(workspace_id)
                sprint = next((s for s in helpers.format_sprints(sprints) if s["id"] == sprint_id), None)
                if sprint:
                    text += f"‚è≥ <b>–°–ø—Ä–∏–Ω—Ç:</b> {sprint['name']}\n"
                    text += f"   <i>–ü–∞–ø–∫–∞:</i> {sprint.get('folder_name', 'Sprint')}\n"
                else:
                    text += f"‚è≥ <b>–°–ø—Ä–∏–Ω—Ç:</b> ID {sprint_id} (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n"
            else:
                text += f"‚è≥ <b>–°–ø—Ä–∏–Ω—Ç:</b> ID {sprint_id} (workspace –Ω–µ –≤—ã–±—Ä–∞–Ω)\n"
        else:
            text += "‚è≥ <b>–°–ø—Ä–∏–Ω—Ç:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω\n"

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id_str = context_data.get("current_user")
        if user_id_str:
            if sprint_id:
                members = await helpers.get_clickup_list_members(sprint_id)
                member = next((m for m in helpers.format_members(members)
                               if str(m["id"]) == str(user_id_str)), None)
                if member:
                    text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {member['username']}\n"
                    text += f"   <i>ID:</i> {member['id']}\n"
                    if member['email']:
                        text += f"   <i>Email:</i> {member['email']}\n"
                else:
                    text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID {user_id_str} (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∏–Ω—Ç–µ)\n"
            else:
                text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID {user_id_str} (—Å–ø—Ä–∏–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω)\n"
        else:
            text += "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω\n"

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å workspace", callback_data="change_workspace")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç", callback_data="change_sprint")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="change_user")],
            [InlineKeyboardButton("–ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="log_my_time")]
        ]

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )

    except Exception as e:
        helpers.logger.error(f"–û—à–∏–±–∫–∞ –≤ current_context: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======================
#  BUTTON HANDLERS
# ======================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if data == "change_workspace":
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ workspace...")
        await change_workspace(update, context)
        return
    elif data == "change_sprint":
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤...")
        await change_sprint(update, context)
        return
    elif data == "change_user":
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        await change_user(update, context)
        return
    elif data == "log_my_time":
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...")
        await log_my_time(update, context)
        return

    if data.startswith("ws_"):
        workspace_id = data.split("_", 1)[1]
        helpers.update_user_context(user_id, "current_workspace", workspace_id)
        helpers.update_user_context(user_id, "current_sprint", None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø—Ä–∏–Ω—Ç
        helpers.update_user_context(user_id, "current_user", None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(f"‚úÖ Workspace —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ID {workspace_id}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é..")
        await current_context(update, context)


    elif data.startswith("sprint_"):
        sprint_id = data.split("_", 1)[1]
        helpers.update_user_context(user_id, "current_sprint", sprint_id)
        helpers.update_user_context(user_id, "current_user", None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        workspace_id = helpers.get_user_context(user_id).get("current_workspace")
        sprints = await helpers.get_clickup_sprints(workspace_id)
        sprint_name = next((s["name"] for s in helpers.format_sprints(sprints) if s["id"] == sprint_id), sprint_id)
        await query.edit_message_text(f"‚úÖ –°–ø—Ä–∏–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sprint_name}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é..")
        await current_context(update, context)


    elif data.startswith("user_"):
        user_id_str = data.split("_", 1)[1]
        helpers.update_user_context(user_id, "current_user", user_id_str)
        sprint_id = helpers.get_user_context(user_id).get("current_sprint")
        if sprint_id:
            members = await helpers.get_clickup_list_members(sprint_id)
            member_name = next(
                (m["username"] for m in helpers.format_members(members) if str(m["id"]) == user_id_str),
                user_id_str
            )
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {member_name}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é..")
        else:
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ID {user_id_str}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é..")

        await current_context(update, context)


    elif data.startswith("task_"):
        task_id = data.split("_", 1)[1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        if user_id in helpers.user_logging_state:
            helpers.user_logging_state[user_id]["task_id"] = task_id

            # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            task_name = next((t["name"] for t in helpers.user_logging_state[user_id]["tasks"]
                              if t["id"] == task_id), "–ó–∞–¥–∞—á–∞")

            await query.edit_message_text(
                f"‚è± –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_name}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ 1.5h - –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞\n"
                "‚Ä¢ 90m - 90 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ 2h30m - 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–≤ –º–∏–Ω—É—Ç–∞—Ö): 150"
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    elif data == "log_cancel":
        if user_id in helpers.user_logging_state:
            del helpers.user_logging_state[user_id]
        await query.edit_message_text("‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")


# ======================
#  MESSAGE HANDLERS
# ======================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if user_id in helpers.user_logging_state and "task_id" in helpers.user_logging_state[user_id]:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        duration_ms = helpers.parse_time_input(message_text)
        if not duration_ms or duration_ms <= 0:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ 1.5h - –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞\n"
                "‚Ä¢ 90m - 90 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ 2h30m - 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        task_id = helpers.user_logging_state[user_id]["task_id"]
        clickup_user_id = helpers.user_logging_state[user_id]["clickup_user_id"]

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        task_exists = any(task["id"] == task_id
                          for task in helpers.user_logging_state[user_id]["tasks"])

        if not task_exists:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            del helpers.user_logging_state[user_id]
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        loading_msg = await update.message.reply_text("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤—Ä–µ–º—è...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω–æ
        duration_minutes = duration_ms / 60000.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
        success = helpers.log_time_locally(task_id, clickup_user_id, duration_minutes)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
            total_minutes = helpers.get_task_time_for_user(task_id, clickup_user_id)
            total_hours = total_minutes / 60.0

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            if total_hours >= 1:
                time_str = f"{total_hours:.1f} —á"
            else:
                time_str = f"{total_minutes:.0f} –º–∏–Ω"

            task_name = next((t["name"] for t in helpers.user_logging_state[user_id]["tasks"]
                              if t["id"] == task_id), "–ó–∞–¥–∞—á–∞")

            await update.message.reply_text(
                f"‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                f"‚Ä¢ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ: {duration_minutes:.1f} –º–∏–Ω\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ –∑–∞–¥–∞—á–µ: {time_str}\n"
                f"‚Ä¢ –ó–∞–¥–∞—á–∞: {task_name}")

            loading_msg = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é..")
            await current_context(update, context)
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=loading_msg.message_id
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del helpers.user_logging_state[user_id]
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")